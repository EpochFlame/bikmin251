.include "macros.inc"

.section .text, "ax"  # 0x800056C0 - 0x80472F00
.global OSInitMutex
OSInitMutex:
/* 800EFB30 000ECA70  7C 08 02 A6 */	mflr r0
/* 800EFB34 000ECA74  90 01 00 04 */	stw r0, 4(r1)
/* 800EFB38 000ECA78  94 21 FF E8 */	stwu r1, -0x18(r1)
/* 800EFB3C 000ECA7C  93 E1 00 14 */	stw r31, 0x14(r1)
/* 800EFB40 000ECA80  7C 7F 1B 78 */	mr r31, r3
/* 800EFB44 000ECA84  48 00 1E 71 */	bl OSInitThreadQueue
/* 800EFB48 000ECA88  38 00 00 00 */	li r0, 0
/* 800EFB4C 000ECA8C  90 1F 00 08 */	stw r0, 8(r31)
/* 800EFB50 000ECA90  90 1F 00 0C */	stw r0, 0xc(r31)
/* 800EFB54 000ECA94  80 01 00 1C */	lwz r0, 0x1c(r1)
/* 800EFB58 000ECA98  83 E1 00 14 */	lwz r31, 0x14(r1)
/* 800EFB5C 000ECA9C  38 21 00 18 */	addi r1, r1, 0x18
/* 800EFB60 000ECAA0  7C 08 03 A6 */	mtlr r0
/* 800EFB64 000ECAA4  4E 80 00 20 */	blr 

.global OSLockMutex
OSLockMutex:
/* 800EFB68 000ECAA8  7C 08 02 A6 */	mflr r0
/* 800EFB6C 000ECAAC  90 01 00 04 */	stw r0, 4(r1)
/* 800EFB70 000ECAB0  94 21 FF E0 */	stwu r1, -0x20(r1)
/* 800EFB74 000ECAB4  93 E1 00 1C */	stw r31, 0x1c(r1)
/* 800EFB78 000ECAB8  93 C1 00 18 */	stw r30, 0x18(r1)
/* 800EFB7C 000ECABC  93 A1 00 14 */	stw r29, 0x14(r1)
/* 800EFB80 000ECAC0  93 81 00 10 */	stw r28, 0x10(r1)
/* 800EFB84 000ECAC4  7C 7C 1B 78 */	mr r28, r3
/* 800EFB88 000ECAC8  4B FF F0 B1 */	bl OSDisableInterrupts
/* 800EFB8C 000ECACC  7C 7D 1B 78 */	mr r29, r3
/* 800EFB90 000ECAD0  48 00 1E 35 */	bl OSGetCurrentThread
/* 800EFB94 000ECAD4  3B C3 00 00 */	addi r30, r3, 0
/* 800EFB98 000ECAD8  3B E0 00 00 */	li r31, 0
.L_800EFB9C:
/* 800EFB9C 000ECADC  80 1C 00 08 */	lwz r0, 8(r28)
/* 800EFBA0 000ECAE0  28 00 00 00 */	cmplwi r0, 0
/* 800EFBA4 000ECAE4  40 82 00 40 */	bne .L_800EFBE4
/* 800EFBA8 000ECAE8  93 DC 00 08 */	stw r30, 8(r28)
/* 800EFBAC 000ECAEC  80 7C 00 0C */	lwz r3, 0xc(r28)
/* 800EFBB0 000ECAF0  38 03 00 01 */	addi r0, r3, 1
/* 800EFBB4 000ECAF4  90 1C 00 0C */	stw r0, 0xc(r28)
/* 800EFBB8 000ECAF8  80 7E 02 F8 */	lwz r3, 0x2f8(r30)
/* 800EFBBC 000ECAFC  28 03 00 00 */	cmplwi r3, 0
/* 800EFBC0 000ECB00  40 82 00 0C */	bne .L_800EFBCC
/* 800EFBC4 000ECB04  93 9E 02 F4 */	stw r28, 0x2f4(r30)
/* 800EFBC8 000ECB08  48 00 00 08 */	b .L_800EFBD0
.L_800EFBCC:
/* 800EFBCC 000ECB0C  93 83 00 10 */	stw r28, 0x10(r3)
.L_800EFBD0:
/* 800EFBD0 000ECB10  90 7C 00 14 */	stw r3, 0x14(r28)
/* 800EFBD4 000ECB14  38 00 00 00 */	li r0, 0
/* 800EFBD8 000ECB18  90 1C 00 10 */	stw r0, 0x10(r28)
/* 800EFBDC 000ECB1C  93 9E 02 F8 */	stw r28, 0x2f8(r30)
/* 800EFBE0 000ECB20  48 00 00 3C */	b .L_800EFC1C
.L_800EFBE4:
/* 800EFBE4 000ECB24  7C 00 F0 40 */	cmplw r0, r30
/* 800EFBE8 000ECB28  40 82 00 14 */	bne .L_800EFBFC
/* 800EFBEC 000ECB2C  80 7C 00 0C */	lwz r3, 0xc(r28)
/* 800EFBF0 000ECB30  38 03 00 01 */	addi r0, r3, 1
/* 800EFBF4 000ECB34  90 1C 00 0C */	stw r0, 0xc(r28)
/* 800EFBF8 000ECB38  48 00 00 24 */	b .L_800EFC1C
.L_800EFBFC:
/* 800EFBFC 000ECB3C  93 9E 02 F0 */	stw r28, 0x2f0(r30)
/* 800EFC00 000ECB40  80 7C 00 08 */	lwz r3, 8(r28)
/* 800EFC04 000ECB44  80 9E 02 D0 */	lwz r4, 0x2d0(r30)
/* 800EFC08 000ECB48  48 00 20 E1 */	bl __OSPromoteThread
/* 800EFC0C 000ECB4C  7F 83 E3 78 */	mr r3, r28
/* 800EFC10 000ECB50  48 00 2C DD */	bl OSSleepThread
/* 800EFC14 000ECB54  93 FE 02 F0 */	stw r31, 0x2f0(r30)
/* 800EFC18 000ECB58  4B FF FF 84 */	b .L_800EFB9C
.L_800EFC1C:
/* 800EFC1C 000ECB5C  7F A3 EB 78 */	mr r3, r29
/* 800EFC20 000ECB60  4B FF F0 41 */	bl OSRestoreInterrupts
/* 800EFC24 000ECB64  80 01 00 24 */	lwz r0, 0x24(r1)
/* 800EFC28 000ECB68  83 E1 00 1C */	lwz r31, 0x1c(r1)
/* 800EFC2C 000ECB6C  83 C1 00 18 */	lwz r30, 0x18(r1)
/* 800EFC30 000ECB70  83 A1 00 14 */	lwz r29, 0x14(r1)
/* 800EFC34 000ECB74  83 81 00 10 */	lwz r28, 0x10(r1)
/* 800EFC38 000ECB78  38 21 00 20 */	addi r1, r1, 0x20
/* 800EFC3C 000ECB7C  7C 08 03 A6 */	mtlr r0
/* 800EFC40 000ECB80  4E 80 00 20 */	blr 

.global OSUnlockMutex
OSUnlockMutex:
/* 800EFC44 000ECB84  7C 08 02 A6 */	mflr r0
/* 800EFC48 000ECB88  90 01 00 04 */	stw r0, 4(r1)
/* 800EFC4C 000ECB8C  94 21 FF E0 */	stwu r1, -0x20(r1)
/* 800EFC50 000ECB90  93 E1 00 1C */	stw r31, 0x1c(r1)
/* 800EFC54 000ECB94  93 C1 00 18 */	stw r30, 0x18(r1)
/* 800EFC58 000ECB98  93 A1 00 14 */	stw r29, 0x14(r1)
/* 800EFC5C 000ECB9C  7C 7D 1B 78 */	mr r29, r3
/* 800EFC60 000ECBA0  4B FF EF D9 */	bl OSDisableInterrupts
/* 800EFC64 000ECBA4  7C 7F 1B 78 */	mr r31, r3
/* 800EFC68 000ECBA8  48 00 1D 5D */	bl OSGetCurrentThread
/* 800EFC6C 000ECBAC  80 1D 00 08 */	lwz r0, 8(r29)
/* 800EFC70 000ECBB0  3B C3 00 00 */	addi r30, r3, 0
/* 800EFC74 000ECBB4  7C 00 F0 40 */	cmplw r0, r30
/* 800EFC78 000ECBB8  40 82 00 70 */	bne .L_800EFCE8
/* 800EFC7C 000ECBBC  80 7D 00 0C */	lwz r3, 0xc(r29)
/* 800EFC80 000ECBC0  34 03 FF FF */	addic. r0, r3, -1
/* 800EFC84 000ECBC4  90 1D 00 0C */	stw r0, 0xc(r29)
/* 800EFC88 000ECBC8  40 82 00 60 */	bne .L_800EFCE8
/* 800EFC8C 000ECBCC  80 7D 00 10 */	lwz r3, 0x10(r29)
/* 800EFC90 000ECBD0  80 9D 00 14 */	lwz r4, 0x14(r29)
/* 800EFC94 000ECBD4  28 03 00 00 */	cmplwi r3, 0
/* 800EFC98 000ECBD8  40 82 00 0C */	bne .L_800EFCA4
/* 800EFC9C 000ECBDC  90 9E 02 F8 */	stw r4, 0x2f8(r30)
/* 800EFCA0 000ECBE0  48 00 00 08 */	b .L_800EFCA8
.L_800EFCA4:
/* 800EFCA4 000ECBE4  90 83 00 14 */	stw r4, 0x14(r3)
.L_800EFCA8:
/* 800EFCA8 000ECBE8  28 04 00 00 */	cmplwi r4, 0
/* 800EFCAC 000ECBEC  40 82 00 0C */	bne .L_800EFCB8
/* 800EFCB0 000ECBF0  90 7E 02 F4 */	stw r3, 0x2f4(r30)
/* 800EFCB4 000ECBF4  48 00 00 08 */	b .L_800EFCBC
.L_800EFCB8:
/* 800EFCB8 000ECBF8  90 64 00 10 */	stw r3, 0x10(r4)
.L_800EFCBC:
/* 800EFCBC 000ECBFC  38 00 00 00 */	li r0, 0
/* 800EFCC0 000ECC00  90 1D 00 08 */	stw r0, 8(r29)
/* 800EFCC4 000ECC04  80 7E 02 D0 */	lwz r3, 0x2d0(r30)
/* 800EFCC8 000ECC08  80 1E 02 D4 */	lwz r0, 0x2d4(r30)
/* 800EFCCC 000ECC0C  7C 03 00 00 */	cmpw r3, r0
/* 800EFCD0 000ECC10  40 80 00 10 */	bge .L_800EFCE0
/* 800EFCD4 000ECC14  7F C3 F3 78 */	mr r3, r30
/* 800EFCD8 000ECC18  48 00 1E 15 */	bl __OSGetEffectivePriority
/* 800EFCDC 000ECC1C  90 7E 02 D0 */	stw r3, 0x2d0(r30)
.L_800EFCE0:
/* 800EFCE0 000ECC20  7F A3 EB 78 */	mr r3, r29
/* 800EFCE4 000ECC24  48 00 2C F5 */	bl OSWakeupThread
.L_800EFCE8:
/* 800EFCE8 000ECC28  7F E3 FB 78 */	mr r3, r31
/* 800EFCEC 000ECC2C  4B FF EF 75 */	bl OSRestoreInterrupts
/* 800EFCF0 000ECC30  80 01 00 24 */	lwz r0, 0x24(r1)
/* 800EFCF4 000ECC34  83 E1 00 1C */	lwz r31, 0x1c(r1)
/* 800EFCF8 000ECC38  83 C1 00 18 */	lwz r30, 0x18(r1)
/* 800EFCFC 000ECC3C  83 A1 00 14 */	lwz r29, 0x14(r1)
/* 800EFD00 000ECC40  38 21 00 20 */	addi r1, r1, 0x20
/* 800EFD04 000ECC44  7C 08 03 A6 */	mtlr r0
/* 800EFD08 000ECC48  4E 80 00 20 */	blr 

.global __OSUnlockAllMutex
__OSUnlockAllMutex:
/* 800EFD0C 000ECC4C  7C 08 02 A6 */	mflr r0
/* 800EFD10 000ECC50  90 01 00 04 */	stw r0, 4(r1)
/* 800EFD14 000ECC54  94 21 FF E8 */	stwu r1, -0x18(r1)
/* 800EFD18 000ECC58  93 E1 00 14 */	stw r31, 0x14(r1)
/* 800EFD1C 000ECC5C  3B E0 00 00 */	li r31, 0
/* 800EFD20 000ECC60  93 C1 00 10 */	stw r30, 0x10(r1)
/* 800EFD24 000ECC64  3B C3 00 00 */	addi r30, r3, 0
/* 800EFD28 000ECC68  48 00 00 30 */	b .L_800EFD58
.L_800EFD2C:
/* 800EFD2C 000ECC6C  80 A4 00 10 */	lwz r5, 0x10(r4)
/* 800EFD30 000ECC70  38 64 00 00 */	addi r3, r4, 0
/* 800EFD34 000ECC74  28 05 00 00 */	cmplwi r5, 0
/* 800EFD38 000ECC78  40 82 00 0C */	bne .L_800EFD44
/* 800EFD3C 000ECC7C  93 FE 02 F8 */	stw r31, 0x2f8(r30)
/* 800EFD40 000ECC80  48 00 00 08 */	b .L_800EFD48
.L_800EFD44:
/* 800EFD44 000ECC84  93 E5 00 14 */	stw r31, 0x14(r5)
.L_800EFD48:
/* 800EFD48 000ECC88  90 BE 02 F4 */	stw r5, 0x2f4(r30)
/* 800EFD4C 000ECC8C  93 E4 00 0C */	stw r31, 0xc(r4)
/* 800EFD50 000ECC90  93 E4 00 08 */	stw r31, 8(r4)
/* 800EFD54 000ECC94  48 00 2C 85 */	bl OSWakeupThread
.L_800EFD58:
/* 800EFD58 000ECC98  80 9E 02 F4 */	lwz r4, 0x2f4(r30)
/* 800EFD5C 000ECC9C  28 04 00 00 */	cmplwi r4, 0
/* 800EFD60 000ECCA0  40 82 FF CC */	bne .L_800EFD2C
/* 800EFD64 000ECCA4  80 01 00 1C */	lwz r0, 0x1c(r1)
/* 800EFD68 000ECCA8  83 E1 00 14 */	lwz r31, 0x14(r1)
/* 800EFD6C 000ECCAC  83 C1 00 10 */	lwz r30, 0x10(r1)
/* 800EFD70 000ECCB0  38 21 00 18 */	addi r1, r1, 0x18
/* 800EFD74 000ECCB4  7C 08 03 A6 */	mtlr r0
/* 800EFD78 000ECCB8  4E 80 00 20 */	blr 

.global OSTryLockMutex
OSTryLockMutex:
/* 800EFD7C 000ECCBC  7C 08 02 A6 */	mflr r0
/* 800EFD80 000ECCC0  90 01 00 04 */	stw r0, 4(r1)
/* 800EFD84 000ECCC4  94 21 FF E0 */	stwu r1, -0x20(r1)
/* 800EFD88 000ECCC8  93 E1 00 1C */	stw r31, 0x1c(r1)
/* 800EFD8C 000ECCCC  93 C1 00 18 */	stw r30, 0x18(r1)
/* 800EFD90 000ECCD0  93 A1 00 14 */	stw r29, 0x14(r1)
/* 800EFD94 000ECCD4  7C 7D 1B 78 */	mr r29, r3
/* 800EFD98 000ECCD8  4B FF EE A1 */	bl OSDisableInterrupts
/* 800EFD9C 000ECCDC  7C 7F 1B 78 */	mr r31, r3
/* 800EFDA0 000ECCE0  48 00 1C 25 */	bl OSGetCurrentThread
/* 800EFDA4 000ECCE4  80 1D 00 08 */	lwz r0, 8(r29)
/* 800EFDA8 000ECCE8  28 00 00 00 */	cmplwi r0, 0
/* 800EFDAC 000ECCEC  40 82 00 44 */	bne .L_800EFDF0
/* 800EFDB0 000ECCF0  90 7D 00 08 */	stw r3, 8(r29)
/* 800EFDB4 000ECCF4  80 9D 00 0C */	lwz r4, 0xc(r29)
/* 800EFDB8 000ECCF8  38 04 00 01 */	addi r0, r4, 1
/* 800EFDBC 000ECCFC  90 1D 00 0C */	stw r0, 0xc(r29)
/* 800EFDC0 000ECD00  80 83 02 F8 */	lwz r4, 0x2f8(r3)
/* 800EFDC4 000ECD04  28 04 00 00 */	cmplwi r4, 0
/* 800EFDC8 000ECD08  40 82 00 0C */	bne .L_800EFDD4
/* 800EFDCC 000ECD0C  93 A3 02 F4 */	stw r29, 0x2f4(r3)
/* 800EFDD0 000ECD10  48 00 00 08 */	b .L_800EFDD8
.L_800EFDD4:
/* 800EFDD4 000ECD14  93 A4 00 10 */	stw r29, 0x10(r4)
.L_800EFDD8:
/* 800EFDD8 000ECD18  90 9D 00 14 */	stw r4, 0x14(r29)
/* 800EFDDC 000ECD1C  38 00 00 00 */	li r0, 0
/* 800EFDE0 000ECD20  3B C0 00 01 */	li r30, 1
/* 800EFDE4 000ECD24  90 1D 00 10 */	stw r0, 0x10(r29)
/* 800EFDE8 000ECD28  93 A3 02 F8 */	stw r29, 0x2f8(r3)
/* 800EFDEC 000ECD2C  48 00 00 24 */	b .L_800EFE10
.L_800EFDF0:
/* 800EFDF0 000ECD30  7C 00 18 40 */	cmplw r0, r3
/* 800EFDF4 000ECD34  40 82 00 18 */	bne .L_800EFE0C
/* 800EFDF8 000ECD38  80 7D 00 0C */	lwz r3, 0xc(r29)
/* 800EFDFC 000ECD3C  3B C0 00 01 */	li r30, 1
/* 800EFE00 000ECD40  38 03 00 01 */	addi r0, r3, 1
/* 800EFE04 000ECD44  90 1D 00 0C */	stw r0, 0xc(r29)
/* 800EFE08 000ECD48  48 00 00 08 */	b .L_800EFE10
.L_800EFE0C:
/* 800EFE0C 000ECD4C  3B C0 00 00 */	li r30, 0
.L_800EFE10:
/* 800EFE10 000ECD50  7F E3 FB 78 */	mr r3, r31
/* 800EFE14 000ECD54  4B FF EE 4D */	bl OSRestoreInterrupts
/* 800EFE18 000ECD58  7F C3 F3 78 */	mr r3, r30
/* 800EFE1C 000ECD5C  80 01 00 24 */	lwz r0, 0x24(r1)
/* 800EFE20 000ECD60  83 E1 00 1C */	lwz r31, 0x1c(r1)
/* 800EFE24 000ECD64  83 C1 00 18 */	lwz r30, 0x18(r1)
/* 800EFE28 000ECD68  83 A1 00 14 */	lwz r29, 0x14(r1)
/* 800EFE2C 000ECD6C  38 21 00 20 */	addi r1, r1, 0x20
/* 800EFE30 000ECD70  7C 08 03 A6 */	mtlr r0
/* 800EFE34 000ECD74  4E 80 00 20 */	blr 

.global OSInitCond
OSInitCond:
/* 800EFE38 000ECD78  7C 08 02 A6 */	mflr r0
/* 800EFE3C 000ECD7C  90 01 00 04 */	stw r0, 4(r1)
/* 800EFE40 000ECD80  94 21 FF F8 */	stwu r1, -8(r1)
/* 800EFE44 000ECD84  48 00 1B 71 */	bl OSInitThreadQueue
/* 800EFE48 000ECD88  80 01 00 0C */	lwz r0, 0xc(r1)
/* 800EFE4C 000ECD8C  38 21 00 08 */	addi r1, r1, 8
/* 800EFE50 000ECD90  7C 08 03 A6 */	mtlr r0
/* 800EFE54 000ECD94  4E 80 00 20 */	blr 

.global OSWaitCond
OSWaitCond:
/* 800EFE58 000ECD98  7C 08 02 A6 */	mflr r0
/* 800EFE5C 000ECD9C  90 01 00 04 */	stw r0, 4(r1)
/* 800EFE60 000ECDA0  94 21 FF D8 */	stwu r1, -0x28(r1)
/* 800EFE64 000ECDA4  BF 61 00 14 */	stmw r27, 0x14(r1)
/* 800EFE68 000ECDA8  3B 63 00 00 */	addi r27, r3, 0
/* 800EFE6C 000ECDAC  3B 84 00 00 */	addi r28, r4, 0
/* 800EFE70 000ECDB0  4B FF ED C9 */	bl OSDisableInterrupts
/* 800EFE74 000ECDB4  7C 7F 1B 78 */	mr r31, r3
/* 800EFE78 000ECDB8  48 00 1B 4D */	bl OSGetCurrentThread
/* 800EFE7C 000ECDBC  80 1C 00 08 */	lwz r0, 8(r28)
/* 800EFE80 000ECDC0  3B C3 00 00 */	addi r30, r3, 0
/* 800EFE84 000ECDC4  7C 00 F0 40 */	cmplw r0, r30
/* 800EFE88 000ECDC8  40 82 00 88 */	bne .L_800EFF10
/* 800EFE8C 000ECDCC  83 BC 00 0C */	lwz r29, 0xc(r28)
/* 800EFE90 000ECDD0  38 00 00 00 */	li r0, 0
/* 800EFE94 000ECDD4  90 1C 00 0C */	stw r0, 0xc(r28)
/* 800EFE98 000ECDD8  80 7C 00 10 */	lwz r3, 0x10(r28)
/* 800EFE9C 000ECDDC  80 9C 00 14 */	lwz r4, 0x14(r28)
/* 800EFEA0 000ECDE0  28 03 00 00 */	cmplwi r3, 0
/* 800EFEA4 000ECDE4  40 82 00 0C */	bne .L_800EFEB0
/* 800EFEA8 000ECDE8  90 9E 02 F8 */	stw r4, 0x2f8(r30)
/* 800EFEAC 000ECDEC  48 00 00 08 */	b .L_800EFEB4
.L_800EFEB0:
/* 800EFEB0 000ECDF0  90 83 00 14 */	stw r4, 0x14(r3)
.L_800EFEB4:
/* 800EFEB4 000ECDF4  28 04 00 00 */	cmplwi r4, 0
/* 800EFEB8 000ECDF8  40 82 00 0C */	bne .L_800EFEC4
/* 800EFEBC 000ECDFC  90 7E 02 F4 */	stw r3, 0x2f4(r30)
/* 800EFEC0 000ECE00  48 00 00 08 */	b .L_800EFEC8
.L_800EFEC4:
/* 800EFEC4 000ECE04  90 64 00 10 */	stw r3, 0x10(r4)
.L_800EFEC8:
/* 800EFEC8 000ECE08  38 00 00 00 */	li r0, 0
/* 800EFECC 000ECE0C  90 1C 00 08 */	stw r0, 8(r28)
/* 800EFED0 000ECE10  80 7E 02 D0 */	lwz r3, 0x2d0(r30)
/* 800EFED4 000ECE14  80 1E 02 D4 */	lwz r0, 0x2d4(r30)
/* 800EFED8 000ECE18  7C 03 00 00 */	cmpw r3, r0
/* 800EFEDC 000ECE1C  40 80 00 10 */	bge .L_800EFEEC
/* 800EFEE0 000ECE20  7F C3 F3 78 */	mr r3, r30
/* 800EFEE4 000ECE24  48 00 1C 09 */	bl __OSGetEffectivePriority
/* 800EFEE8 000ECE28  90 7E 02 D0 */	stw r3, 0x2d0(r30)
.L_800EFEEC:
/* 800EFEEC 000ECE2C  48 00 1B 19 */	bl OSDisableScheduler
/* 800EFEF0 000ECE30  7F 83 E3 78 */	mr r3, r28
/* 800EFEF4 000ECE34  48 00 2A E5 */	bl OSWakeupThread
/* 800EFEF8 000ECE38  48 00 1B 4D */	bl OSEnableScheduler
/* 800EFEFC 000ECE3C  7F 63 DB 78 */	mr r3, r27
/* 800EFF00 000ECE40  48 00 29 ED */	bl OSSleepThread
/* 800EFF04 000ECE44  7F 83 E3 78 */	mr r3, r28
/* 800EFF08 000ECE48  4B FF FC 61 */	bl OSLockMutex
/* 800EFF0C 000ECE4C  93 BC 00 0C */	stw r29, 0xc(r28)
.L_800EFF10:
/* 800EFF10 000ECE50  7F E3 FB 78 */	mr r3, r31
/* 800EFF14 000ECE54  4B FF ED 4D */	bl OSRestoreInterrupts
/* 800EFF18 000ECE58  BB 61 00 14 */	lmw r27, 0x14(r1)
/* 800EFF1C 000ECE5C  80 01 00 2C */	lwz r0, 0x2c(r1)
/* 800EFF20 000ECE60  38 21 00 28 */	addi r1, r1, 0x28
/* 800EFF24 000ECE64  7C 08 03 A6 */	mtlr r0
/* 800EFF28 000ECE68  4E 80 00 20 */	blr 

.global OSSignalCond
OSSignalCond:
/* 800EFF2C 000ECE6C  7C 08 02 A6 */	mflr r0
/* 800EFF30 000ECE70  90 01 00 04 */	stw r0, 4(r1)
/* 800EFF34 000ECE74  94 21 FF F8 */	stwu r1, -8(r1)
/* 800EFF38 000ECE78  48 00 2A A1 */	bl OSWakeupThread
/* 800EFF3C 000ECE7C  80 01 00 0C */	lwz r0, 0xc(r1)
/* 800EFF40 000ECE80  38 21 00 08 */	addi r1, r1, 8
/* 800EFF44 000ECE84  7C 08 03 A6 */	mtlr r0
/* 800EFF48 000ECE88  4E 80 00 20 */	blr 
